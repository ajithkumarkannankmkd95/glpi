version: 2.1

executors:
  php-7_0:
    docker:
      - image: circleci/php:7.0-fpm-node-browsers
      - image: circleci/mariadb:10.2
    working_directory: '~/app/php-7_0'
  php-7_1:
    docker:
      - image: circleci/php:7.1-fpm-node-browsers
      - image: circleci/mariadb:10.3
    working_directory: '~/app/php-7_1'
  php-7_2:
    docker:
      - image: circleci/php:7.2-fpm-node-browsers
      - image: circleci/mariadb:10.3
    working_directory: '~/app/php-7_2'
  php-7_3:
    docker:
      - image: circleci/php:7.3-fpm-node-browsers
      - image: circleci/mariadb:10.3
    working_directory: '~/app/php-7_3'
  php-latest:
    docker:
      - image: circleci/php:latest-node-browsers
      - image: circleci/mariadb:10.3
    working_directory: '~/app/php-latest'

shared:
  - &install_system_dependencies_step
    run:
      name: Install system dependencies
      command: |
        sudo -E apt-get update
        sudo -E apt-get install -y mysql-client libpng-dev libxml2-dev
        sudo -E docker-php-ext-install mysqli gd xmlrpc
        sudo -E pecl install apcu \<<< '' || sudo -E pecl install apcu-4.0.11 \<<< ''
        sudo -E docker-php-ext-enable apcu
        echo "apc.enable=1" | sudo -E tee --append /usr/local/etc/php/conf.d/docker-php-ext-apcu.ini
        echo "apc.enable_cli=1" | sudo -E tee --append /usr/local/etc/php/conf.d/docker-php-ext-apcu.ini
        echo "memory_limit = 512M" | sudo -E tee --append /usr/local/etc/php/conf.d/docker-php-memory.ini

  - &build_steps
      steps:
        - checkout
        - *install_system_dependencies_step
        - restore_cache:
            keys:
              - composer-install-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "composer.lock" }}
              - npm-install-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "package-lock.json" }}
        - run:
            name: Composer install
            command: |
              sudo -E composer self-update
              sed -e '/"php":/d' -i composer.json
              rm -f composer.lock
              composer install --optimize-autoloader --no-progress --prefer-dist --no-suggest
        - run:
            name: npm install
            command: |
              npm install
        - save_cache:
            key: composer-install-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "composer.lock" }}
            paths:
              - ./vendor
        - save_cache:
            key: npm-install-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "package-lock.json" }}
            paths:
              - ./node_modules
        - persist_to_workspace:
            root: '~/'
            paths:
              - app

  - &test_steps
      steps:
        - *install_system_dependencies_step
        - attach_workspace:
            at: '~/'
        - run:
            name: Update DB
            command: |
              mysql -h 127.0.0.1 -u root -e 'create database glpitest080;'
              mysql -h 127.0.0.1 -u root glpitest080 < tests/glpi-0.80-empty.sql
              cp tests/circleci.config_db.php tests/config_db.php
              bin/console glpi:database:update --config-dir=./tests --allow-unstable --no-interaction
              bin/console glpi:database:update --config-dir=./tests --allow-unstable --no-interaction |grep -q "No migration needed." || (echo "glpi:database:update command FAILED" && exit 1)
              bin/console glpi:migration:myisam_to_innodb --config-dir=./tests --no-interaction
              rm tests/config_db.php
        - run:
            name: Install DB
            command: |
              mysql -h 127.0.0.1 -u root -e 'create database glpitest;'
              bin/console glpi:database:install --config-dir=./tests --no-interaction --db-name=glpitest --db-host=127.0.0.1 --db-user=root
              bin/console glpi:database:update --config-dir=./tests --no-interaction |grep -q "No migration needed." || (echo "glpi:database:update command FAILED" && exit 1)
        - run:
            name: Unit tests
            command: php vendor/bin/atoum -p 'php -d memory_limit=512M' --debug --force-terminal --use-dot-report --configurations tests/telemetry.php --bootstrap-file tests/bootstrap.php --no-code-coverage -d tests/units
        - run:
            name: Database tests
            command: php vendor/bin/atoum -p 'php -d memory_limit=512M' --debug --force-terminal --use-dot-report --configurations tests/telemetry.php --bootstrap-file tests/bootstrap.php --no-code-coverage --max-children-number 1 -d tests/database
        - run:
            name: Functionnal tests
            command: php vendor/bin/atoum -p 'php -d memory_limit=512M' --debug --force-terminal --use-dot-report --configurations tests/telemetry.php --bootstrap-file tests/bootstrap.php --no-code-coverage --max-children-number 1 -d tests/functionnal
        - run:
            name: WEB tests
            command: |
              php -S localhost:8088 tests/router.php &>/dev/null &
              php vendor/bin/atoum -p 'php -d memory_limit=512M' --debug --force-terminal --use-dot-report --configurations tests/telemetry.php --bootstrap-file tests/bootstrap.php --no-code-coverage --max-children-number 1 -d tests/web
#        - run:
#            name: LDAP tests
#            command: |
#              ./tests/LDAP/ldap_run.sh
#              composer testldap

jobs:
  build-php-7_0:
    <<: *build_steps
    executor: php-7_0
  build-php-7_1:
    <<: *build_steps
    executor: php-7_1
  build-php-7_2:
    <<: *build_steps
    executor: php-7_2
  build-php-7_3:
    <<: *build_steps
    executor: php-7_3
  build-php-latest:
    <<: *build_steps
    executor: php-latest

  test-php-7_0:
    <<: *test_steps
    executor: php-7_0
  test-php-7_1:
    <<: *test_steps
    executor: php-7_1
  test-php-7_2:
    <<: *test_steps
    executor: php-7_2
  test-php-7_3:
    <<: *test_steps
    executor: php-7_3
  test-php-latest:
    <<: *test_steps
    executor: php-latest

  lint:
    executor: php-7_3
    steps:
      - *install_system_dependencies_step
      - attach_workspace:
          at: '~/'
      - run:
          name: PHP Parallel Lint
          command: vendor/bin/parallel-lint  --exclude files --exclude plugins --exclude vendor --exclude tools/vendor .
      - run:
          name: sensiolabs/security-checker
          command: vendor/bin/security-checker security:check
      - run:
          name: Coding standards
          command: |
            if [[ $(php --version|grep "7\.3") ]]; then vendor/bin/phpcs -d memory_limit=512M -p -n --extensions=php --standard=PSR2 ./src && vendor/bin/phpcs -d memory_limit=512M -p --extensions=php --standard=vendor/glpi-project/coding-standard/GlpiStandard/ --ignore=/.git,/config,/files,/lib,/node_modules,/plugins,/src,/tests/config,/vendor ./; else echo "No CS for this version"; fi
            if [[ $(php --version|grep "7\.3") ]]; then node_modules/.bin/eslint ./js && node_modules/.bin/eslint --env=node --parser-options=ecmaVersion:6 --rule 'indent: ["error", 4]' ./webpack.config.js && echo "ESLint found no errors"; else echo "No CS for this version"; fi
            if [[ $(php --version|grep "7\.3") ]]; then node_modules/.bin/stylelint "css/**/*.{,s,sa}css" --ignore-pattern="css/tiny_mce/**" && echo "ESLint found no errors"; else echo "No CS for this version"; fi


workflows:
  version: 2
  all-tests:
    jobs:
      - build-php-7_0
      - build-php-7_1
      - build-php-7_2
      - build-php-7_3
      - build-php-latest
      - lint:
          requires:
            - build-php-7_3
      - test-php-7_0:
          requires:
            - build-php-7_0
      - test-php-7_1:
          requires:
            - build-php-7_1
      - test-php-7_2:
          requires:
            - build-php-7_2
      - test-php-7_3:
          requires:
            - build-php-7_3
      - test-php-latest:
          requires:
            - build-php-latest
  nightly-tests:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build-php-latest
      - test-php-latest:
          requires:
            - build-php-latest
