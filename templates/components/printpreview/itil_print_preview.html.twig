{#
 # ---------------------------------------------------------------------
 #
 # GLPI - Gestionnaire Libre de Parc Informatique
 #
 # http://glpi-project.org
 #
 # @copyright 2015-2024 Teclib' and contributors.
 # @licence   https://www.gnu.org/licenses/gpl-3.0.html
 #
 # ---------------------------------------------------------------------
 #
 # LICENSE
 #
 # This file is part of GLPI.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation, either version 3 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
 #
 # ---------------------------------------------------------------------
 #}

{% import 'components/form/fields_macros.html.twig' as fields %}

{% set field_options = {} %}
{% set main_show = headers_states['item-main'] is not defined or headers_states['item-main'] == "true" ? true : false %}

<div class="content-card">
    <div class="row">
        {% if is_multi_entities_mode() %}
            {% if item.isNewItem() %}
                {{ fields.dropdownField(
                    'Entity',
                    'entities_id',
                    item.fields['entities_id'],
                    _n('Entity', 'Entities', 1),
                    field_options|merge({
                    'entity': userentities,
                    'on_change': 'this.form.submit()',
                    })
                ) }}
            {% else %}
                {% set entity_html %}
                    {{ call('Entity::badgeCompletenameLinkById', [item.fields['entities_id']])|raw }}
                {% endset %}

                {{ fields.field(
                    '',
                    entity_html,
                    _n('Entity', 'Entities', 1),
                    field_options|merge({
                    'add_field_class': 'd-flex align-items-center',
                    })
                ) }}
            {% endif %}

            {% if item.isField('is_recursive') %}
                {{ fields.dropdownYesNo(
                    'is_recursive',
                    item.fields['is_recursive'],
                    __('Child entities'),
                    field_options
                ) }}
            {% endif %}
        {% endif %}

        {{ fields.datetimeField(
            'date',
            item.fields['date'],
            __('Opening date'),
            field_options
        ) }}

        {% if item.getType() != 'Ticket' %}
            {{ fields.datetimeField(
                'time_to_resolve',
                item.fields['time_to_resolve'],
                __('Time to resolve'),
                field_options
            ) }}
        {% endif %}

        {% if item.isSolved(true) %}
            {{ fields.datetimeField(
            'solvedate',
            item.fields['solvedate'],
            __('Resolution date'),
            field_options
        ) }}
        {% endif %}

        {% if item.isClosed() %}
            {{ fields.datetimeField(
            'closedate',
            item.fields['closedate'],
            __('Close date'),
            field_options
        ) }}
        {% endif %}

        {% if item.getType() == 'Ticket' %}
            {% set type_params = {
                'value': item.fields['type'],
                'width': '100%',
                'display': false,
                'rand': rand,
            }|merge(field_options) %}
            {% if item.isNewItem() %}
                {% set type_params = type_params|merge({'on_change': 'this.form.submit()',}) %}
            {% else %}
                {% set type_params = type_params|merge({'on_change': 'reloadCategory()',}) %}
            {% endif %}
            {# Without passing a specific ID, the "dropdown" prefix is missing from the label's "for" property here (not sure why). TODO: investigate #}
            {{ fields.field(
                'type',
                item.dropdownType('type', type_params),
                _n('Type', 'Types', 1),
                field_options|merge({
                    id: 'dropdown_type' ~ rand,
                })
            ) }}
        {% endif %}

        {% set cat_params = field_options|merge({
            'entity': item.fields['entities_id'],
            'disabled': (not (canupdate or can_requester)),
        }) %}
        {% if item.isNewItem() %}
            {% set cat_params = cat_params|merge({
                'on_change': 'this.form.submit()',
            }) %}
        {% endif %}
        {% if not item.isNewItem() and itiltemplate.isMandatoryField('itilcategories_id') and item.fields['itilcategories_id'] > 0 %}
            {% set cat_params = cat_params|merge({
                'display_emptychoice': false
            }) %}
        {% endif %}
        {% if item.getType() == 'Ticket' %}
            {% if item.fields['type'] == constant('Ticket::INCIDENT_TYPE') %}
                {% set cat_params = cat_params|merge({'condition': {'is_incident': 1}}) %}
            {% elseif item.fields['type'] == constant('Ticket::DEMAND_TYPE') %}
                {% set cat_params = cat_params|merge({'condition': {'is_request': 1}}) %}
            {% endif %}
        {% elseif item.getType() == 'Problem' %}
            {% set cat_params = cat_params|merge({'condition': {'is_problem': 1}}) %}
        {% elseif item.getType() == 'Change' %}
            {% set cat_params = cat_params|merge({'condition': {'is_change': 1}}) %}
        {% endif %}
        <span id="category_block_{{ rand }}">
        {{ fields.dropdownField(
            'ITILCategory',
            'itilcategories_id',
            item.fields['itilcategories_id'],
            _n('Category', 'Categories', 1),
            cat_params
        ) }}
        </span>

        {{ include('components/itilobject/fields/status.html.twig') }}

        {% if item.isField('requesttypes_id') %}
            {{ fields.dropdownField(
                'RequestType',
                'requesttypes_id',
                item.fields['requesttypes_id'],
                'RequestType'|itemtype_name,
                field_options|merge({
                    'condition': {
                    'is_active': 1,
                    'is_ticketheader': 1
                    }
                })
            ) }}
        {% endif %}

        {{ include('components/itilobject/fields/priority_matrix.html.twig') }}

        {% if item.isField('locations_id') %}
            {{ fields.dropdownField(
                'Location',
                'locations_id',
                item.fields['locations_id'],
                'Location'|itemtype_name,
                field_options|merge({
                    'hide_if_no_elements': true,
                    'entity': item.fields['entities_id'],
                    'entity_sons': true
                })
            ) }}
        {% endif %}

        {% if item.isNewItem() and item.getType() == 'Ticket' %}
            {{ fields.dropdownField(
                'Contract',
                '_contracts_id',
                params['_contracts_id']|default(0),
                'Contract'|itemtype_name,
                field_options|merge({
                    'entity': item.fields['entities_id'],
                    'width': '100%',
                    'hide_if_no_elements': true,
                    'nochecklimit': true
                })
            ) }}
        {% endif %}

        {% if item.getType() != 'Ticket' or item.isNewItem() %}
            {{ fields.dropdownTimestampField(
                'actiontime',
                item.fields['actiontime'],
                __('Total duration'),
                field_options
            ) }}
        {% endif %}

        {{ include('components/itilobject/fields/global_validation.html.twig') }}

        {% if item.isField('externalid') %}
            {{ fields.textField('externalid', item.fields['externalid'], __('External ID'), field_options) }}
        {% endif %}
    </div>
</div>

{% for key, value in printable_tabs %}
    {% if value == 1 %}
        <div class="content-card">
            <div class="card my-0 border-0 shadow-none">
                <div class="card-header">
                    <h4 class="card-title ps-4">
                        <i class="{{ key|itemtype_icon }}"></i>{{ key|itemtype_name }}
                    </h4>
                </div>
            </div>
            {% if key == 'Actors' %}
                <div class="row">
                    {{ include('components/itilobject/actors/main.html.twig') }}
                </div>
            {% elseif key == 'Timeline' %}
                {% do call(item.showForm(item.getID(), {'_preview' : true})) %}
            {% else %}
                {% do call(key ~ '::displayTabContentForItem', [item, 0]) %}
            {% endif %}
        </div>
    {% endif %}
{% endfor %}
<script>
    import("{{ js_path('js/PrintPreview/print_itil.js') }}")
</script>