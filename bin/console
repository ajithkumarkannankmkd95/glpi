#!/usr/bin/env php
<?php
/**
 * ---------------------------------------------------------------------
 * GLPI - Gestionnaire Libre de Parc Informatique
 * Copyright (C) 2015-2018 Teclib' and contributors.
 *
 * http://glpi-project.org
 *
 * based on GLPI - Gestionnaire Libre de Parc Informatique
 * Copyright (C) 2003-2014 by the INDEPNET Development Team.
 *
 * ---------------------------------------------------------------------
 *
 * LICENSE
 *
 * This file is part of GLPI.
 *
 * GLPI is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * GLPI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GLPI. If not, see <http://www.gnu.org/licenses/>.
 * ---------------------------------------------------------------------
 */

// Extract command line arguments
$options = [];
if (isset($_SERVER['argv'])) {
   for ($i = 1; $i < count($_SERVER['argv']); $i++) {
      $chunks = explode('=', $_SERVER['argv'][$i], 2);
      $chunks[0] = preg_replace('/^--/', '', $chunks[0]);
      $options[$chunks[0]] = (isset($chunks[1]) ? $chunks[1] : true);
   }
}

// Handle specific dependencies update command that cannot be made upon symfony console
if (isset($_SERVER['argv']) && ['dependencies', 'install'] === array_slice($_SERVER['argv'], 1, 2)) {
   $composer_command = 'composer install --no-interaction --no-suggest';
   $npm_command = 'npm install';

   if (array_key_exists('composer-options', $options) && is_string($options['composer-options'])) {
      $composer_command .= ' ' . $options['composer-options'];
   }

   chdir(dirname(__FILE__, 2));

   $exit_code = 0;

   passthru($composer_command, $exit_code);
   if ($exit_code > 0) {
      exit($exit_code);
   }

   passthru($npm_command, $exit_code);
   if ($exit_code > 0) {
      exit($exit_code);
   }

   file_put_contents('.package.hash', sha1_file('package-lock.json'));

   passthru('npm run-script build-dev', $exit_code);
   exit($exit_code);
}

// Prevent console execution from root user.
// Main purpose of this limitation is to prevent creation of files (cache, logs, ...)
// owned by root user to prevent possible file rights errors.
if (function_exists('posix_getuid') && 0 === posix_getuid()
    && !(array_key_exists('allow-superuser', $options) && $options['allow-superuser'])) {
   $user = function_exists('posix_getpwuid') ? posix_getpwuid(0) : ['name' => 'root'];
   echo(
      sprintf(
         'Using bin/console as %s/super user is discouraged. Use --allow-superuser option to bypass this limitation.' . "\n",
         $user['name']
      )
   );
   exit(1);
}

// If "config-dir" option is used in command line, defines GLPI_CONFIG_DIR with its value
if (array_key_exists('config-dir', $options)) {
   $config_dir = $options['config-dir'];

   if (false === $config_dir || !@is_dir($config_dir)) {
      echo(
         sprintf(
            '--config-dir "%s" does not exists in "%s".' . "\n",
            $config_dir,
            getcwd()
         )
      );
      exit(1);
   }

   define('GLPI_CONFIG_DIR', realpath($config_dir));
}


// Init GLPI
define('GLPI_ROOT', dirname(__DIR__));

include_once(GLPI_ROOT . '/inc/based_config.php');
include_once(GLPI_ROOT . '/inc/db.function.php');
@include_once(GLPI_CONFIG_DIR . '/config_db.php');

// Run console application
use Glpi\Console\Application;

$application = new Application();
$application->run();
