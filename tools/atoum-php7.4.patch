From e92fa9fec826ffd9b0e7a1f52c28b4ebc7aa49f5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?C=C3=A9dric=20Anne?= <cedric.anne@gmail.com>
Date: Fri, 7 Jun 2019 16:52:08 +0200
Subject: [PATCH 1/3] Fix "ReflectionType::__toString() is deprecated"

---
 vendor/atoum/atoum/classes/mock/generator.php | 45 +++++++++++++++++++++++---------------
 1 file changed, 27 insertions(+), 18 deletions(-)

diff --git a/vendor/atoum/atoum/classes/mock/generator.php b/vendor/atoum/atoum/classes/mock/generator.php
index f88ed1e06..9079d48cd 100644
--- a/vendor/atoum/atoum/classes/mock/generator.php
+++ b/vendor/atoum/atoum/classes/mock/generator.php
@@ -388,12 +388,13 @@ protected function generateClassMethodCode(\reflectionClass $class)
 
                     if ($this->hasReturnType($method) === true && $this->isVoid($method) === false) {
                         $returnType = $this->getReflectionType($method);
+                        $returnTypeName = $this->getReflectionTypeName($returnType);
 
                         switch (true) {
-                            case (string) $returnType === 'self':
-                            case (string) $returnType === 'parent':
-                            case (string) $returnType === $class->getName():
-                            case interface_exists((string) $returnType) && $class->implementsInterface((string) $returnType):
+                            case $returnTypeName === 'self':
+                            case $returnTypeName === 'parent':
+                            case $returnTypeName === $class->getName():
+                            case interface_exists($returnTypeName) && $class->implementsInterface($returnTypeName):
                                 $mockedMethods .= "\t\t\t\t" . 'return $this;' . PHP_EOL;
                                 break;
 
@@ -437,12 +438,13 @@ protected function generateClassMethodCode(\reflectionClass $class)
                     } else {
                         if ($this->hasReturnType($method) === true && $this->isVoid($method) === false) {
                             $returnType = $this->getReflectionType($method);
+                            $returnTypeName = $this->getReflectionTypeName($returnType);
 
                             switch (true) {
-                                case (string) $returnType === 'self':
-                                case (string) $returnType === 'parent':
-                                case (string) $returnType === $class->getName():
-                                case interface_exists((string) $returnType) && $class->implementsInterface((string) $returnType):
+                                case $returnTypeName === 'self':
+                                case $returnTypeName === 'parent':
+                                case $returnTypeName === $class->getName():
+                                case interface_exists($returnTypeName) && $class->implementsInterface($returnTypeName):
                                     $mockedMethods .= "\t\t\t" . 'return $this;' . PHP_EOL;
                                     break;
 
@@ -545,12 +547,13 @@ protected function generateInterfaceMethodCode(\reflectionClass $class, $addIter
 
                     if ($this->hasReturnType($method) === true && $this->isVoid($method) === false) {
                         $returnType = $this->getReflectionType($method);
+                        $returnTypeName = $this->getReflectionTypeName($returnType);
 
                         switch (true) {
-                            case (string) $returnType === 'self':
-                            case (string) $returnType === 'parent':
-                            case (string) $returnType === $class->getName():
-                            case interface_exists((string) $returnType) && $class->implementsInterface((string) $returnType):
+                            case $returnTypeName === 'self':
+                            case $returnTypeName === 'parent':
+                            case $returnTypeName === $class->getName():
+                            case interface_exists($returnTypeName) && $class->implementsInterface($returnTypeName):
                                 $methodCode .= "\t\t\t\t" . 'return $this;' . PHP_EOL;
                                 break;
 
@@ -647,22 +650,23 @@ protected function getReturnType(\reflectionMethod $method)
 
         $returnType = $this->getReflectionType($method);
         $isNullable = $this->isNullable($returnType);
+        $returnTypeName = $this->getReflectionTypeName($returnType);
 
         switch (true) {
-            case (string) $returnType === 'self':
+            case $returnTypeName === 'self':
                 $returnTypeCode = ': ' . ($isNullable ? '?' : '') . '\\' . $method->getDeclaringClass()->getName();
                 break;
 
-            case (string) $returnType === 'parent':
+            case $returnTypeName === 'parent':
                 $returnTypeCode = ': ' . ($isNullable ? '?' : '') . '\\' . $method->getDeclaringClass()->getParentClass()->getName();
                 break;
 
             case $returnType->isBuiltin():
-                $returnTypeCode = ': ' . ($isNullable ? '?' : '') . $returnType;
+                $returnTypeCode = ': ' . ($isNullable ? '?' : '') . $returnTypeName;
                 break;
 
             default:
-                $returnTypeCode = ': ' . ($isNullable ? '?' : '') . '\\' . $returnType;
+                $returnTypeCode = ': ' . ($isNullable ? '?' : '') . '\\' . $returnTypeName;
         }
 
         return $returnTypeCode;
@@ -683,9 +687,14 @@ protected function getReflectionType(\reflectionMethod $method)
         return $this->hasReturnType($method) ? $method->getReturnType() : null;
     }
 
+    protected function getReflectionTypeName(\reflectionType $type)
+    {
+        return $type instanceof \reflectionNamedType ? $type->getName() : (string) $type;
+    }
+
     protected function isVoid(\reflectionMethod $method)
     {
-        return $this->hasReturnType($method) ? (string) $method->getReturnType() === 'void' : false;
+        return $this->hasReturnType($method) ? $this->getReflectionTypeName($method->getReturnType()) === 'void' : false;
     }
 
     protected static function isNullableParameter(\ReflectionParameter $parameter)
@@ -778,7 +787,7 @@ protected static function getParameterType(\reflectionParameter $parameter)
                 return $prefix . '\\' . $class->getName() . ' ';
 
             case method_exists($parameter, 'hasType') && $parameter->hasType():
-                return $prefix . $parameter->getType() . ' ';
+                return $prefix . $this->getReflectionTypeName($parameter->getType()) . ' ';
 
             default:
                 return '';

From e51fc121a1dc6a270855d932beaabe349a213166 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?C=C3=A9dric=20Anne?= <cedric.anne@gmail.com>
Date: Tue, 11 Jun 2019 12:42:28 +0200
Subject: [PATCH 2/3] [fixup] Fix static call

---
 vendor/atoum/atoum/classes/mock/generator.php | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/vendor/atoum/atoum/classes/mock/generator.php b/vendor/atoum/atoum/classes/mock/generator.php
index 9079d48cd..9952516ae 100644
--- a/vendor/atoum/atoum/classes/mock/generator.php
+++ b/vendor/atoum/atoum/classes/mock/generator.php
@@ -787,7 +787,8 @@ protected static function getParameterType(\reflectionParameter $parameter)
                 return $prefix . '\\' . $class->getName() . ' ';
 
             case method_exists($parameter, 'hasType') && $parameter->hasType():
-                return $prefix . $this->getReflectionTypeName($parameter->getType()) . ' ';
+                $type = $parameter->getType();
+                return $prefix . ($type instanceof \reflectionNamedType ? $type->getName() : (string) $type) . ' ';
 
             default:
                 return '';

From 7f4373c877e753d66af477c68201191dc07d9687 Mon Sep 17 00:00:00 2001
From: Johan Cwiklinski <jcwiklinski@teclib.com>
Date: Mon, 9 Sep 2019 09:07:23 +0200
Subject: [PATCH 3/3] Fix Unparenthesized `a ? b : c ?: d` is deprecated. Use
 either `(a ? b : c) ?: d` or `a ? b : (c ?: d)`

---
 vendor/atoum/atoum/classes/autoloader.php                        | 2 +-
 vendor/atoum/atoum/classes/includer.php                          | 2 +-
 vendor/atoum/atoum/classes/iterators/recursives/atoum/source.php | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/vendor/atoum/atoum/classes/autoloader.php b/vendor/atoum/atoum/classes/autoloader.php
index a555556f6..2afaa56ca 100644
--- a/vendor/atoum/atoum/classes/autoloader.php
+++ b/vendor/atoum/atoum/classes/autoloader.php
@@ -207,7 +207,7 @@ public function requireClass($class)
         }
 
         if (static::exists($realClass) === true) {
-            $alias = ($realClass !== $class ? $class : $this->getClassAlias($realClass) ?: $this->getNamespaceAlias($realClass));
+            $alias = ($realClass !== $class ? $class : ($this->getClassAlias($realClass) ?: $this->getNamespaceAlias($realClass)));
 
             if ($alias !== null) {
                 class_alias($realClass, $alias);
diff --git a/vendor/atoum/atoum/classes/includer.php b/vendor/atoum/atoum/classes/includer.php
index 41cca771d..c9916da30 100644
--- a/vendor/atoum/atoum/classes/includer.php
+++ b/vendor/atoum/atoum/classes/includer.php
@@ -55,7 +55,7 @@ public function includePath($path, \closure $closure = null)
         $this->adapter->restore_error_handler();
 
         if (count($this->errors) > 0) {
-            $realpath = parse_url($this->path, PHP_URL_SCHEME) !== null ? $this->path : realpath($this->path) ?: $this->path;
+            $realpath = (parse_url($this->path, PHP_URL_SCHEME) !== null ? $this->path : (realpath($this->path) ?: $this->path));
 
             if (in_array($realpath, $this->adapter->get_included_files(), true) === false) {
                 throw new includer\exception('Unable to include \'' . $this->path . '\'');
diff --git a/vendor/atoum/atoum/classes/iterators/recursives/atoum/source.php b/vendor/atoum/atoum/classes/iterators/recursives/atoum/source.php
index b74ee3589..aa726e288 100644
--- a/vendor/atoum/atoum/classes/iterators/recursives/atoum/source.php
+++ b/vendor/atoum/atoum/classes/iterators/recursives/atoum/source.php
@@ -43,7 +43,7 @@ public function current()
 
     public function key()
     {
-        return ($this->pharDirectory === null ? $this->innerIterator->key() : preg_replace('#^(:[^:]+://)?' . preg_quote($this->sourceDirectory, '#') . '#', $this->pharDirectory, $this->innerIterator->current()) ?: null);
+        return ($this->pharDirectory === null ? $this->innerIterator->key() : (preg_replace('#^(:[^:]+://)?' . preg_quote($this->sourceDirectory, '#') . '#', $this->pharDirectory, $this->innerIterator->current()) ?: null));
     }
 
     public function next()
