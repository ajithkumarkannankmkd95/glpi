<?php

/**
 * ---------------------------------------------------------------------
 *
 * GLPI - Gestionnaire Libre de Parc Informatique
 *
 * http://glpi-project.org
 *
 * @copyright 2015-2024 Teclib' and contributors.
 * @copyright 2003-2014 by the INDEPNET Development Team.
 * @licence   https://www.gnu.org/licenses/gpl-3.0.html
 *
 * ---------------------------------------------------------------------
 *
 * LICENSE
 *
 * This file is part of GLPI.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * ---------------------------------------------------------------------
 */

namespace Glpi\Http;

use Symfony\Component\HttpKernel\Kernel as BaseKernel;
use Symfony\Component\HttpKernel\HttpKernelInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;
use Symfony\Bundle\FrameworkBundle\FrameworkBundle;
use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;

class Kernel extends BaseKernel
{
    use MicroKernelTrait;

    public function getProjectDir(): string
    {
        return \dirname(__DIR__, 3);
    }

    public function getCacheDir(): string
    {
        // TODO Use GLPI_CACHE_DIR
        return $this->getProjectDir() . '/files/_cache/symfony';
    }

    public function getLogDir(): string
    {
        // TODO Use GLPI_LOG_DIR
        return $this->getProjectDir() . '/files/_log/';
    }

    public function registerBundles(): iterable
    {
        return [
            new FrameworkBundle(),
        ];
    }

    protected function configureContainer(ContainerConfigurator $container): void
    {
        $container
            ->services()
                ->load('Glpi\Controller\\', $this->getProjectDir() . '/src/Glpi/Controller')
                    ->autowire()
                    ->autoconfigure()
        ;
    }

    protected function configureRoutes(RoutingConfigurator $routes): void
    {
        $routes->import($this->getProjectDir() . '/src/Glpi/Controller', 'attribute');
    }

    public function handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true): Response
    {
        $this->runLegacyRouter($request);

        return parent::handle($request, $type, $catch); // TODO: Change the autogenerated stub
    }

    private function runLegacyRouter(Request $request): void
    {

        /**
         * GLPI web router.
         *
         * This router is used to be able to expose only the `/public` directory on the webserver.
         */

        $glpi_root = realpath(dirname(__DIR__, 3));

        if (
            $request->server->get('SCRIPT_NAME') === '/public/index.php'
            && preg_match('/^\/public/', $request->server->get('REQUEST_URI')) !== 1
        ) {
            // When requested URI does not start with '/public' but `$request->server->get('SCRIPT_NAME')` is '/public/index.php',
            // it means that document root is the GLPI root directory, but a rewrite rule redirects the request to the PHP router.
            // This case happen when redirection to PHP router is made by an `.htaccess` file placed in the GLPI root directory,
            // and has to be handled to support shared hosting where it is not possible to change the web server root directory.
            $uri_prefix = '';
        } else {
            // `$request->server->get('SCRIPT_NAME')` corresponds to the script path relative to server document root.
            // -> if server document root is `/public`, then `$request->server->get('SCRIPT_NAME')` will be equal to `/index.php`
            // -> if script is located into a `/glpi-alias` alias directory, then `$request->server->get('SCRIPT_NAME')` will be equal to `/glpi-alias/index.php`
            $uri_prefix = rtrim(str_replace('\\', '/', dirname($request->server->get('SCRIPT_NAME'))), '/');
        }

        // Get URI path relative to GLPI (i.e. without alias directory prefix).
        $path = preg_replace(
            '/^' . preg_quote($uri_prefix, '/') . '/',
            '',
            parse_url($request->server->get('REQUEST_URI') ?? '/', PHP_URL_PATH)
        );

        $proxy = new \Glpi\Http\ProxyRouter($glpi_root, $path);
        $proxy->handleRedirects($uri_prefix);

        if ($proxy->isTargetAPhpScript() && $proxy->isPathAllowed() && ($target_file = $proxy->getTargetFile()) !== null) {
            // Ensure `getcwd()` and inclusion path is based on requested file FS location.
            chdir(dirname($target_file));

            // (legacy) Redefine some $_SERVER variables to have same values whenever scripts are called directly
            // or through current router.
            $target_path     = $uri_prefix . $proxy->getTargetPath();
            $target_pathinfo = $proxy->getTargetPathInfo();
            $_SERVER['PATH_INFO']       = $target_pathinfo;
            $_SERVER['PHP_SELF']        = $target_path;
            $_SERVER['SCRIPT_FILENAME'] = $target_file;
            $_SERVER['SCRIPT_NAME']     = $target_path;

            // New server overrides:
            $request->server->set('PATH_INFO', $target_pathinfo);
            $request->server->set('PHP_SELF', $target_path);
            $request->server->set('SCRIPT_FILENAME', $target_file);
            $request->server->set('SCRIPT_NAME', $target_path);

            // Execute target script.
            $this->requireFile($target_file, $request);
            exit;
        }

        $proxy->proxify();

        if (str_contains(implode(";", headers_list()), ';Content-type:')) {
            // "proxify()" sends headers for files, and if it does, we must exit() to avoid running Symfony's router
            exit;
        }
    }

    /**
     * The goal of this wrapper is to make sure to remove *all* context variables,
     * except the $target_file (which can't be removed) and the HTTP request (for smoother upgrades)
     */
    private function requireFile(string $target_file, Request $request): void
    {
        require($target_file);
    }
}
